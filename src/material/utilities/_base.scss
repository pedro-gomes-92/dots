/**
 * base.scss
 *
 * All available base utilities.
 *
 * Index
 * - Selectors
 * - Calculation
 * - Position
 * - Alignment
 * - Gap
 * - Path
 */

// Selectors

@mixin hover {
  &:hover,
  &.is-hovered {
    @content;
  }
}

@mixin active {
  &:active,
  &.is-active,
  &:focus,
  &.is-focused {
    @content;
  }
}

// Calculation
@function factor($value, $percent) {
  $number: $percent / 100%;
  @return $value + ($value * $number);
}

// Position
@mixin position($x: left, $y: top, $isInner: true) {
  position: absolute;

  $relativeHorizontal: -100% -50% 0;
  $relativeVertical: -100% -50% 0;

  @if ($isInner) {
    $relativeHorizontal: 0 -50% -100%;
    $relativeVertical: 0 -50% -100%;
  }

  @if ($x==left) {
    left: 0;

    @if ($y==top) {
      top: 0;
      transform: translate(nth($relativeHorizontal, 1), nth($relativeVertical, 1));
    } @else if ($y==middle) {
      top: 50%;
      transform: translate(nth($relativeHorizontal, 1), nth($relativeVertical, 2));
    } @else if ($y==bottom) {
      top: 100%;
      transform: translate(nth($relativeHorizontal, 1), nth($relativeVertical, 3));
    }
  }

  @if ($x==center) {
    left: 50%;

    @if ($y==top) {
      top: 0;
      transform: translate(nth($relativeHorizontal, 2), nth($relativeVertical, 1));
    } @else if ($y==middle) {
      top: 50%;
      transform: translate(nth($relativeHorizontal, 2), nth($relativeVertical, 2));
    } @else if ($y==bottom) {
      top: 100%;
      transform: translate(nth($relativeHorizontal, 2), nth($relativeVertical, 3));
    }
  }

  @if ($x==right) {
    left: 100%;

    @if ($y==top) {
      top: 0;
      transform: translate(nth($relativeHorizontal, 3), nth($relativeVertical, 1));
    } @else if ($y==middle) {
      top: 50%;
      transform: translate(nth($relativeHorizontal, 3), nth($relativeVertical, 2));
    } @else if ($y==bottom) {
      top: 100%;
      transform: translate(nth($relativeHorizontal, 3), nth($relativeVertical, 3));
    }
  }
}

// Alignment
@mixin align-text($alignment) {
  @if ($alignment== 'start') {
    text-align: left;
  } @else if ($alignment== 'center') {
    text-align: center;
  } @else {
    text-align: right;
  }
}

@mixin align-container($alignment) {
  @if ($alignment== 'start') {
    margin: 0 0 auto 0;
  } @else if ($alignment== 'center') {
    margin: auto 0 auto 0;
  } @else {
    margin: auto 0 0 0;
  }
}

@mixin align($alignment, $isText: false) {
  @if ($isText) {
    @include align-text($alignment);
  } @else {
    @include align-container($alignment);
  }
}

// Gap

$gap-elements: 8px !default;

@mixin gap($horizontal, $vertical, $wrapping: false) {
  $gap-vertical: $vertical * $gap-elements;
  $gap-horizontal: $horizontal * $gap-elements;

  @if ($wrapping) {
    $gap-vertical: $gap-vertical/2;
    $gap-horizontal: $gap-horizontal/2;
    margin: (-$gap-vertical) (-$gap-horizontal);

    > * {
      padding: $gap-vertical $gap-horizontal;
    }
  } @else {
    > :not(:last-child) {
      margin-right: $gap-horizontal;
      margin-bottom: $gap-vertical;
    }
  }
}

// Path
$path-dots-fonts: '~eva-icons/style/fonts' !default;
